<?xml version="1.0" encoding="utf-8"?>
<!--

////////////////////////////////////////////////////////////////////////////////
//	
//	Copyright 2014 Ardisia Labs LLC. All Rights Reserved.
//
//	This file is licensed under the Ardisia Component Library License. 
//
//	Only license holders are entitled to use this file subject to the  
//	conditions of the license. All other uses are expressly forbidden. Visit 
//	http://www.ardisialabs.com to view and purchase a license.
//
//	Apache Flex's source code notices are reproduced below.
//
// 	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
//
//  Licensed to the Apache Software Foundation (ASF) under one or more
//  contributor license agreements.  See the NOTICE file distributed with
//  this work for additional information regarding copyright ownership.
//  The ASF licenses this file to You under the Apache License, Version 2.0
//  (the "License"); you may not use this file except in compliance with
//  the License.  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
////////////////////////////////////////////////////////////////////////////////

-->
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:fb="http://ns.adobe.com/flashbuilder/2009" 
		minHeight="23" 
		blendMode="normal"
		alpha.disabledStates="0.5">
	
	<!-- host component -->
	<fx:Metadata>
		<![CDATA[ [HostComponent("spark.components.TextInput")] ]]>
	</fx:Metadata> 
	
	<!-- scripts -->
	<fx:Script>
		<![CDATA[
			import spark.components.Button;
			
			//----------------------------------
			//  variables
			//----------------------------------
			
			protected var paddingChanged:Boolean;
			
			protected var stylesChanged:Boolean;
			
			protected var _borderColor:uint;
			
			protected var _iconPaddingTop:Number = 0;
			
			protected var _iconPaddingRight:Number = 0;
			
			protected var _iconPaddingBottom:Number = 0;
			
			protected var _iconPaddingLeft:Number = 0;
			
			//----------------------------------
			//  methods
			//----------------------------------
			
			override protected function commitProperties():void
			{
				super.commitProperties();
				
				if (paddingChanged)
				{
					updatePadding();
					paddingChanged = false;
				}
				
				if (stylesChanged)
				{
					stylesChanged = false;
					
					_iconPaddingTop = getStyle("iconPaddingTop");
					_iconPaddingRight = getStyle("iconPaddingRight");
					_iconPaddingBottom = getStyle("iconPaddingBottom");
					_iconPaddingLeft = getStyle("iconPaddingLeft");
					_borderColor = getStyle("borderColor");
				}
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, 
														  unscaledHeight:Number):void
			{
				// assume border and background are present
				textDisplay.left = 5;
				
				if (promptDisplay)
				{
					promptDisplay.left = 8;
				}
				
				if (iconPart && iconPart.getPreferredBoundsWidth() > 0)
				{
					iconPart.top = 1 + _iconPaddingTop;
					iconPart.bottom = 1 + _iconPaddingBottom;
					iconPart.left = 1 + _iconPaddingLeft;
					
					textDisplay.left = iconPart.left + Math.round(iconPart.getPreferredBoundsWidth()) + _iconPaddingRight;
					
					if (promptDisplay)
					{
						promptDisplay.left = textDisplay.left;
						promptDisplay.right = 3;
					}
				}
				if (clearButtonPart && clearButtonPart.visible)
				{
					var rightOffset:Number = isNaN(Number(clearButtonPart.right)) ? 0 : Number(clearButtonPart.right);
					textDisplay.right = rightOffset + Math.round(clearButtonPart.getLayoutBoundsWidth()) + 2;
				}
				else
				{
					textDisplay.right = 5;
				}
				
				if (border)
				{
					border.color = border.color>=0?border.color: _borderColor;
				}
				
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
			
			private function updatePadding():void
			{
				if (!textDisplay)
					return;
				
				var padding:Number;
				
				padding = getStyle("paddingLeft");
				if (textDisplay.getStyle("paddingLeft") != padding)
					textDisplay.setStyle("paddingLeft", padding);
				
				padding = getStyle("paddingTop");
				if (textDisplay.getStyle("paddingTop") != padding)
					textDisplay.setStyle("paddingTop", padding);
				
				padding = getStyle("paddingRight");
				if (textDisplay.getStyle("paddingRight") != padding)
					textDisplay.setStyle("paddingRight", padding);
				
				padding = getStyle("paddingBottom");
				if (textDisplay.getStyle("paddingBottom") != padding)
					textDisplay.setStyle("paddingBottom", padding);
				
				if (!promptDisplay)
					return;
				
				padding = getStyle("paddingLeft");
				if (promptDisplay.getStyle("paddingLeft") != padding)
					promptDisplay.setStyle("paddingLeft", padding);
				
				padding = getStyle("paddingTop");
				if (promptDisplay.getStyle("paddingTop") != padding)
					promptDisplay.setStyle("paddingTop", padding);
				
				padding = getStyle("paddingRight");
				if (promptDisplay.getStyle("paddingRight") != padding)
					promptDisplay.setStyle("paddingRight", padding);
				
				padding = getStyle("paddingBottom");
				if (promptDisplay.getStyle("paddingBottom") != padding)
					promptDisplay.setStyle("paddingBottom", padding);
			}
			
			override public function styleChanged(styleProp:String):void
			{
				var allStyles:Boolean = !styleProp || styleProp == "styleName";
				
				super.styleChanged(styleProp);
				
				if (allStyles || styleProp.indexOf("padding") == 0)
				{
					paddingChanged = true;
				}
				
				stylesChanged = true;
				invalidateProperties();
			}
		]]>
	</fx:Script>
	
	<!-- declarations -->
	<fx:Declarations>
		
		<!-- ClearButtonButtonSkin -->
		<fx:Component className="ClearButtonButtonSkin">
			<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
					xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
					minWidth="13" minHeight="13" 
					alpha.disabled="0.5">
				
				<!-- host component -->
				<fx:Metadata>
					<![CDATA[ [HostComponent("spark.components.Button")] ]]>
				</fx:Metadata>
				
				<!-- states -->
				<s:states>
					<s:State name="up" />
					<s:State name="over" />
					<s:State name="down" />
					<s:State name="disabled" />
				</s:states>
				
				
				<s:Ellipse top="0" right="0" bottom="0" left="0">
					<s:fill>
						<s:SolidColor color="#000000" color.over="#006B9F" color.down="#800000" />
					</s:fill>
				</s:Ellipse>
				
				<s:Path data="M 4 4 L 9 9 M 4 9 L 9 4">
					<s:stroke>
						<s:SolidColorStroke color="#FFFFFF"
											weight="2"
											caps="round"
											pixelHinting="false"
											joints="round"
											scaleMode="normal"/>
					</s:stroke>
				</s:Path>
				
			</s:Skin>
		</fx:Component>
		
	</fx:Declarations>
	
	<!-- states -->
	<s:states>
		<s:State name="normal"/>
		<s:State name="disabled" stateGroups="disabledStates"/>
		<s:State name="normalWithPrompt"/>
		<s:State name="disabledWithPrompt" stateGroups="disabledStates"/>
	</s:states>
	
	<!--- border and fill --> 
	<s:Line left="0" right="0"  bottom="0">
		<s:stroke>
			<s:SolidColorStroke id="border" weight="2" color="#000000" 
								pixelHinting="true"/>
		</s:stroke>
		<!--<s:fill>
			<s:SolidColor id="bgFill" 
						  color="#FFFFFF" />
		</s:fill>-->
	</s:Line>
	
	<!-- skin part -->
	<!--- @optional -->
	<s:BitmapImage id="iconPart"
				   scaleMode="letterbox"
				   fillMode="clip"/>
	
	<!-- skin part -->
	<!--- @required -->
	<s:RichEditableText id="textDisplay"
						minWidth="1"
						verticalCenter="1"
						widthInChars="10"
						lineBreak="explicit"
						multiline="false"
						paddingTop="2" paddingBottom="2"/>
	
	<!-- skin part -->
	<!--- @optional -->
	<s:Button id="clearButtonPart" 
			  right="5" verticalCenter="0"
			  skinClass="{Class(ClearButtonButtonSkin)}" />
	
	<!-- skin part -->
	<!--- @optional -->
	<s:Label id="promptDisplay" 
			 includeIn="normalWithPrompt,disabledWithPrompt" 
			 maxDisplayedLines="1"
			 verticalCenter="1"
			 mouseEnabled="false" 
			 mouseChildren="false"/>
	
</s:Skin>
