<?xml version="1.0" encoding="utf-8"?>
<!--
	 病区用血统计模块
	 author:芮玉红   2012.06.27
	 checked by：
-->
<mx:Module xmlns:fx="http://ns.adobe.com/mxml/2009"
		   xmlns:s="library://ns.adobe.com/flex/spark"
		   xmlns:mx="library://ns.adobe.com/flex/mx"
		   layout="vertical"
		   width="100%"
		   height="100%"
		   paddingBottom="5"
		   paddingLeft="5"
		   paddingRight="5"
		   paddingTop="5"
		   horizontalGap="0"
		   verticalGap="0"
		   backgroundColor="#E2E8E8"
		   horizontalScrollPolicy="auto"
		   creationComplete="doInit()"
		   xmlns:controls="cn.superion.base.components.controls.*"
		   xmlns:config="cn.superion.base.config.*"
		   xmlns:util="cn.superion.blood.util.*">
	
	<fx:Script>
		<![CDATA[
			import cn.superion.base.AppInfo;
			import cn.superion.base.config.BaseDict;
			import cn.superion.base.config.GridColumn;
			import cn.superion.base.config.ParameterObject;
			import cn.superion.base.util.ArrayCollUtils;
			import cn.superion.base.util.FormUtils;
			import cn.superion.base.RemoteUtil;
			import cn.superion.blood.util.DefaultPage;
			import cn.superion.dataDict.DictWinShower;
			import cn.superion.main.treeMenu.MainFrameUtil;
			import cn.superion.report2.ReportPrinter;
			import cn.superion.report2.ReportViewer;
			import cn.superion.vo.center.deptPerson.CdPersonDict;
			import cn.superion.vo.dataDict.CvBloodTypeDict;
			
			import com.as3xls.xls.ExcelFile;
			import com.as3xls.xls.Sheet;
			
			import flexlib.scheduling.util.DateUtil;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.rpc.remoting.RemoteObject;
			import mx.utils.StringUtil;
			
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;

			private var destination:String='workLoadStatImpl';
			private var params:Object={};
			private var _visitDoctor:String="";
			private var _deptCode:String="";
			private var _visitDeptCode:String="";

			[Bindable]
			private var isData:Boolean=false;


			private function doInit():void
			{
				var bloodTypeArc:ArrayCollection=BaseDict.bloodTypeDict;
				for each (var itemType:Object in bloodTypeArc)
				{
					if (itemType.bloodTypeName == '全部')
					{
						bloodTypeArc.removeItemAt(bloodTypeArc.getItemIndex(itemType));
					}
				}
				bloodTypeArc.addItemAt({bloodType: "", bloodTypeName: '全部'}, 0);
				ddlBloodtype.dataProvider=bloodTypeArc;
				ddlBloodtype.selectedIndex=0;
				ddlBloodtype.textInput.editable=false;

				//限制放大镜输入
				preventDefaultForm()
			}

			/**
			 * 阻止放大镜表格输入内容
			 */
			private function preventDefaultForm():void
			{
//				wardCode.txtContent.addEventListener(TextOperationEvent.CHANGING, function(e:TextOperationEvent):void
//					{
//						e.preventDefault();
//					})

				personId.txtContent.addEventListener(TextOperationEvent.CHANGING, function(e:TextOperationEvent):void
					{
						e.preventDefault();
					})
			}

			
			/**
			 * 对表格进行初始化
			 * */
			private function initDataGrid(rev:Object):void{
				
				gdDeliver.sumField = [];
				if(grp.selectedValue == "5"){
					gdDeliver.columns = [gdDeliver.columns[0]].concat(gdDeliver.columns[1]);	
				}else{
					gdDeliver.columns = [gdDeliver.columns[0]].concat(gdDeliver.columns[1]).concat(gdDeliver.columns[2]);
				}
				
				gdDeliver.format = [];
				//物资分类集合
				var lstMaterialClass:ArrayCollection = rev.data[1];
				//后台统计的结果集
				var lstResult:ArrayCollection = rev.data[0]; 
				if(lstResult.length > 0){
					btPrint.enabled = true;
					btExport.enabled = true;
				}
				var sumFields:Array = [];
				var formats:Array = [];
				//首先构造列 it['红细胞']
				for each (var it:CvBloodTypeDict in lstMaterialClass){
					var dataGridColumns:Array = gdDeliver.columns; //获取表格的列集合
					//重新获取下已存在的列
					
					if(grp.selectedValue == "5"){
						dataGridColumns[0].dataField = "科室";
						dataGridColumns[0].headerText = "科室";
						dataGridColumns[1].dataField = "total"
						dataGridColumns[1].headerText = "总量（u）";
					}else{
						dataGridColumns[0].dataField = "科室";
						dataGridColumns[0].headerText = "科室";
						dataGridColumns[1].dataField = (grp.selectedValue == "1"||grp.selectedValue == '4')?"病区":grp.selectedValue == "2"?"医生":"医生";
						dataGridColumns[1].headerText = (grp.selectedValue == "1"||grp.selectedValue == '4')?"病区":grp.selectedValue == "2"?"医生":"医生";
						dataGridColumns[2].dataField = "total"
						dataGridColumns[2].headerText = "总量（u）";	
					}
					
					//创建新的列
					var dataGridColumn:DataGridColumn = new DataGridColumn();
					dataGridColumn.headerText = it.typeName;
					dataGridColumn.dataField = it.typeName;
					dataGridColumn.setStyle("textAlign","right");
					dataGridColumns.push(dataGridColumn);
					gdDeliver.columns = dataGridColumns;
					//合计列
					sumFields.push(it.typeName);
					
					//格式化
					formats.push("0.00");
					
					
				}
				sumFields.push("total");
				formats.push("0.00");
				gdDeliver.sumField = sumFields;
				gdDeliver.format = formats;
				var newArray:ArrayCollection = new ArrayCollection();
				//处理数据，给每一项赋一个别名
				for each (var rowItem:Object in lstResult){
					var newItem:Object = new Object();
					//循环列，计算行合计
					var total:Number = 0;
					for (var i:int = 0;i<lstMaterialClass.length; i ++){
						//构建第一列
						newItem["科室"] = rowItem[0];
						if(grp.selectedValue =='5'){ //如果选择的是科室
							newItem[lstMaterialClass[i].typeName]= Number(rowItem[i+1]);
						}else{
							newItem[grp.selectedValue == "1" || grp.selectedValue == "4"?"病区":grp.selectedValue == "2"?"医生":"病区医生"] = rowItem[1];
							if(grp.selectedValue == "2" || grp.selectedValue == "3"){ //选择 医生 或 病区医生时，都用同一个报表
								//根据医生id找姓名
								var person:Object = ArrayCollUtils.findItemInArrayByValue(BaseDict.personIdDict,'personId',rowItem[1]);
								newItem["医生"] =  person.personIdName;
								
							}
							newItem[lstMaterialClass[i].typeName]= Number(rowItem[i+2]);
						}
						
						if(lstMaterialClass[i].units == '治疗量'){//1个治疗量=10u
							newItem[lstMaterialClass[i].typeName] = newItem[lstMaterialClass[i].typeName] * 10;
						}
						if(lstMaterialClass[i].units == 'ml'){ //单位为ml的，出了全血、rh阴性全血按照 200ml = 1u，
							if(lstMaterialClass[i].typeName == 'RH阴性全血' || lstMaterialClass[i].typeName == '全血'){
								newItem[lstMaterialClass[i].typeName] = newItem[lstMaterialClass[i].typeName] /200;
							}else{
								//其他全部按照100ml = 1u处理
								newItem[lstMaterialClass[i].typeName] = newItem[lstMaterialClass[i].typeName] /100;//输血科说按照这样处理
							}
							 
						}
						total += newItem[lstMaterialClass[i].typeName];//Number(rowItem[i+1]);
					}
					newItem['total'] = total;
					newArray.addItem(newItem);
				}
				gdDeliver.dataProvider = newArray;
			}
			/**
			 * 查询按钮
			 * */
			protected function btQuery_clickHandler():void
			{
				params["beginDate"]=nav.selectedIndex ==0?dfStartDate.selectedDate:dfStartDate.text;
				params["groupBy"]=nav.selectedIndex ==0?grp.selectedValue.toString():grp.selectedValue =='3'?"2":grp.selectedValue.toString();
				params["selectedIndex"]=nav.selectedIndex;
				params["endDate"]=nav.selectedIndex ==0?addOneDay(dfEndDate.selectedDate):dfEndDate.text;
				params['typeCode']=nav.selectedIndex ==0?ddlBloodtype.selectedItem.bloodType:"";
				params["visitDoctor"]=StringUtil.trim(personId.txtContent.text).length == 0 ? null : _visitDoctor;
				params["deptCode"]=StringUtil.trim(wardCode.txtContent.text).length == 0 ? null : _deptCode;
				params["visitDept"]=StringUtil.trim(deptCode.txtContent.text).length == 0 ? null : _visitDeptCode;
				params["optSign"]=groupByOpr.selected?"1":null;
				
				var paramQuery:ParameterObject=new ParameterObject();
				paramQuery.conditions=params;

				var ro:RemoteObject=RemoteUtil.getRemoteObject(destination, function(rev:Object):void
					{
						if(nav.selectedIndex ==0){
							
							gdWardUseBloodList.dataProvider=null;
	
							if (rev.data && rev.data.length > 0)
							{
								isData=true;
								if (groupByWard.selected || groupByDoctor.selected)
								{
									gdWardUseBloodList.groupField=""
								}
								else
								{
									gdWardUseBloodList.groupField="visitDeptName"
								}
								gdWardUseBloodList.dataProvider=rev.data;
								return;
							}
							Alert.show('没有相关的用血情况', '提示');
							isData=false;
								
						}
						else{
							initDataGrid(rev);
						}
					
					});
				if(nav.selectedIndex ==0){
					
					ro.findWardUseBloodByCon(paramQuery);
					
				}else{
					ro.findWardUseBloodByCon1(paramQuery);
				}
			}

			/**
			 * 给指定日期+(24*3600*1000-1000);
			 * */
			private function addOneDay(date:Date):Date
			{
				return DateUtil.addTime(new Date(date), DateUtil.DAY_IN_MILLISECONDS - 1000);
			}

			/**
			 * 打印、预览处理事件
			 * @param 参数说明
			 * 		  lstrPurview 权限编号;
			 * 		  isPrintSign 打印输出标示,预览：2，直接打印：1，输出：0
			 */
			protected function btPreview_clickHandler(lstrPurview:String, isPrintSign:String):void
			{

				var dataList:ArrayCollection=gdWardUseBloodList.dataProvider as ArrayCollection;

				for each (var obj:Object in dataList)
				{
					obj.assiAmountUnits=obj.assiAmount + obj.assiUnits;
				}
				var dict:Dictionary=new Dictionary();
				dict["主标题"]="病区用血统计";
				dict["单位名称"]=AppInfo.sysUser.unitsName;
				dict["日期"]=DateField.dateToString(new Date(), 'YYYY-MM-DD');
				dict["开始日期"]=DateField.dateToString(dfStartDate.selectedDate, 'YYYY-MM-DD');
				dict["结束日期"]=DateField.dateToString(dfEndDate.selectedDate, 'YYYY-MM-DD');
				dict["病区"]=wardCode.text;
				dict['成份']=ddlBloodtype.textInput.text;

				dict["制表人"]=AppInfo.sysUser.userName;
				
				var strXml:String = "";
				
				if (isPrintSign == '1')
				{
					if (groupByWard.selected)
					{
						strXml = "report/blood/stat/wardUseBlood_ward.xml";
//						ReportPrinter.LoadAndPrint("report/blood/stat/wardUseBlood_ward.xml", dataList, dict);
					}
					else if (groupByDoctor.selected)
					{
						strXml = "report/blood/stat/wardUseBlood_doc.xml";
//						ReportPrinter.LoadAndPrint("report/blood/stat/wardUseBlood_doc.xml", dataList, dict);
					}
					else
					{
						strXml = "report/blood/stat/wardUseBlood_ward_doc.xml";
//						ReportPrinter.LoadAndPrint("report/blood/stat/wardUseBlood_ward_doc.xml", dataList, dict);
					}

				}
				else
				{
					if (groupByWard.selected)
					{
						strXml = "report/blood/stat/wardUseBlood_ward.xml";
//						ReportViewer.Instance.Show("report/blood/stat/wardUseBlood_ward.xml", dataList, dict);
					}
					else if (groupByDoctor.selected)
					{
						strXml = "report/blood/stat/wardUseBlood_doc.xml";
//						ReportViewer.Instance.Show("report/blood/stat/wardUseBlood_doc.xml", dataList, dict);
					}
					else
					{
						strXml = "report/blood/stat/wardUseBlood_ward_doc.xml";
//						ReportViewer.Instance.Show("report/blood/stat/wardUseBlood_ward_doc.xml", dataList, dict);
					}
				}
				loadReportXml(strXml,dataList,dict,isPrintSign);
			}
			private function loadReportXml(reportUrl:String,faryDetails:ArrayCollection, fdict:Dictionary,fprintSign:String):void{
				var loader:URLStream=new URLStream();
				loader.addEventListener(Event.COMPLETE, function(event:Event):void{
					var stream:URLStream = event.currentTarget as URLStream;
					var xml:XML=XML(stream.readMultiByte(stream.bytesAvailable,"utf-8"));
					if (fprintSign == "1")
					{
						ReportPrinter.Print(xml, faryDetails, fdict);
					}
					else
					{
						ReportViewer.Instance.Show(xml, faryDetails, fdict);
					}
				});
				var url:URLRequest = new URLRequest(reportUrl);
				loader.load(url);
			}
			/**
			 * 病区字典：点击
			 * */
			protected function wardCode_queryIconClickHandler():void
			{
				var x:int=0;
				var y:int=this.parentApplication.screen.height - 345;

				DictWinShower.showDeptWardDict((function(item:Object):void
					{
						wardCode.txtContent.text=item.deptName;
						params['deptCode']=item.deptCode;
						_deptCode=item.deptCode;

					}), x, y);
			}

			/**
			 * 人员字典：点击
			 * */
			protected function personId_queryIconClickHandler():void
			{
				var x:int=0;
				var y:int=this.parentApplication.screen.height - 345;

				DictWinShower.showPersonDict((function(item:Object):void
					{
						personId.txtContent.text=item.personIdName;
						_visitDoctor=item.personId;
						params['visitDoctor']=item.personId;

					}), x, y);
			}

			/**
			 * 输出
			 * */
			protected function btExport_clickHandler(lstrPurview:String, isPrintSign:String):void
			{

				if(nav.selectedIndex == 0){
					
					DefaultPage.exportExcel(gdWardUseBloodList, "病区用血统计");
				}
				else{
					DefaultPage.exportExcel(gdDeliver, "病区用血统计（新）");
				}

			}


			private function labFun(item:Object, column:DataGridColumn):String
			{
				if (column.headerText == '血液成份')
				{
					var typeItem:Object=ArrayCollUtils.findItemInArrayByValue(BaseDict.bloodTypeDict, 'bloodType', item.typeCode);
					item.typeName=typeItem == null ? '' : typeItem.bloodTypeName;
					return item.typeName;
				}

				return '';
			}


			protected function keyUpCtrl(event:KeyboardEvent, ctrl:Object):void
			{
				if (event.keyCode == 13)
				{
					if (ctrl.className == "DateField")
					{
						ctrl.open();
					}
					if (event.currentTarget.className == "TextInput")
					{
						if (StringUtil.trim(event.currentTarget.text).length == 0)
						{
							return;
						}
					}
					ctrl.setFocus();
				}
			}

			/**
			 * 回车实现查找功能
			 * */
			private function keUpHandler(e:KeyboardEvent):void
			{
				if (!btQuery.enabled)
				{
					return;
				}
				if (e.keyCode == Keyboard.ENTER)
				{
					btQuery_clickHandler();
				}
			}

			//显示成份字典
			protected function ddlBloodtype_creationCompleteHandler(event:FlexEvent):void
			{
				ddlBloodtype.dataProvider=BaseDict.bloodTypeDict;
			}

			/**
			 * 返回主页面
			 * */
			protected function btReturn_clickHandler(event:MouseEvent):void
			{
				MainFrameUtil.closeTab(this);
			}
			
			/**
			 * 部门字典：点击
			 * */
			protected function deptCode_queryIconClickHandler():void
			{
				var x:int=0;
				var y:int=this.parentApplication.screen.height - 345;
				DictWinShower.showDeptDict((function (item:Object):void{
					deptCode.txtContent.text = item.deptName;
					params['visitDept']=item.deptCode;
					_visitDeptCode = item.deptCode;
				}));
			}

			protected function ddlBloodtype_changeHandler(event:IndexChangeEvent):void
			{
				if (grp.selectedValue == '1' || grp.selectedValue == '2')
				{
					return;
				}
				// TODO Auto-generated method stub
				if (ddlBloodtype.selectedIndex != 0)
					gdWardUseBloodList.sumFields=["assiAmount"];
				else
					gdWardUseBloodList.sumFields=[];
			}


			protected function grp_changeHandler(event:Event):void
			{
				// TODO Auto-generated method stub 
				gdWardUseBloodList.dataProvider=[];
				gdWardUseBloodList.groupField="";
				if (grp.selectedValue == 1)
				{
					personId.txtContent.text=''
				}
				if (grp.selectedValue == 2)
				{
					wardCode.txtContent.text=''
				}
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<s:RadioButtonGroup id="grp"
							change="grp_changeHandler(event)"/>
	</fx:Declarations>
	<s:Scroller id="scrol"
				width="100%"
				height="100%">
		<s:VGroup width="100%"
				  height="100%"
				  gap="0">
			<!-- 表体部分 -->
			<s:BorderContainer width="100%"
							   height="100%"
							   backgroundColor="0xE2E8E8"
							   borderStyle="solid"
							   borderColor="#9ABBE6">
				<s:VGroup width="100%"
						  height="100%"
						  paddingLeft="5"
						  paddingRight="5">
					<!-- 查询条件区 -->
					<s:HGroup width="100%"
							  id="queryPanelTi"
							  height="33"
							  paddingLeft="5"
							  paddingTop="5"
							  verticalAlign="middle">
						<s:Label text="出库日期"
								 color="#0000FF"/>
						<mx:DateField id="dfStartDate"
									  keyUp="keyUpCtrl(event,dfEndDate)"
									  width="105"
									  formatString="YYYY-MM-DD"
									  enterFrame="{dfStartDate.selectedDate==null?dfStartDate.selectedDate=new Date():dfStartDate.selectedDate}"
									  selectableRange="{{rangeEnd:new Date()}}"
									  showToday="true"/>
						<s:Label text="-"
								 width="8"/>
						<mx:DateField id="dfEndDate"
									  width="172"
									  formatString="YYYY-MM-DD"
									  enterFrame="{dfEndDate.selectedDate==null?dfEndDate.selectedDate=new Date():dfEndDate.selectedDate}"
									  selectableRange="{{rangeStart:dfStartDate.selectedDate, rangeEnd:new Date()}}"
									  showToday="true"
									  keyUp="keyUpCtrl(event,btQuery)"/>
						<mx:Spacer width="70"/>
						<s:RadioButton label="病区"
									   id="groupByWard"
									   groupName="grp"
									   selected="true"
									   value="1"/>
						<s:RadioButton label="医生"
									   id="groupByDoctor"
									   groupName="grp"
									   value="2"/>
						<s:RadioButton label="病区医生"
									   id="groupByWardDoc"
									   groupName="grp"
									   value="3"/>
						
						<s:RadioButton label="手术科室"
									   id="groupByOpr"
									   groupName="grp"
									   value="4"/>
						
						<s:RadioButton label="科室"
									   id="groupByDpt"
									   toolTip="按照科室统计时，请选择【按列汇总成分】标签"
									   groupName="grp"
									   value="5"/>
						

					</s:HGroup>
					<s:HGroup width="100%"
							  height="33"
							  paddingLeft="5"
							  paddingTop="5"
							  verticalAlign="middle">
						<s:Label text="病　区"/>
						<controls:TextInputIcon id="wardCode"
												enabled="{groupByWard.selected || groupByWardDoc.selected}"
												queryIconClick="wardCode_queryIconClickHandler()"
												width="136"/>
						<s:Label text="科　室"/>
						<controls:TextInputIcon id="deptCode"
												queryIconClick="deptCode_queryIconClickHandler()"
												width="136"/>
						<s:Label text="医  生"/>
						<controls:TextInputIcon id="personId"
												enabled="{groupByDoctor.selected || groupByWardDoc.selected}"
												queryIconClick="personId_queryIconClickHandler()"
												width="104"/>

						<s:Label text="成  份"/>
						<s:ComboBox id="ddlBloodtype"
									change="ddlBloodtype_changeHandler(event)"
									labelField="bloodTypeName"
									keyUp="keyUpCtrl(event,btQuery)"
									requireSelection="true"
									width="185"/>
						<mx:LinkButton id="btQuery"
									   height="24"
									   label=" 查 找"
									   skin="mx.skins.halo.ButtonSkin"
									   icon="@Embed(source='/assets/images/button/query20.png')"
									   click="btQuery_clickHandler()"
									   keyUp="keUpHandler(event)"/>
					</s:HGroup>
					<mx:TabNavigator id="nav" width="100%" height="100%">
						<s:NavigatorContent label="按行汇总成分">
							<controls:GroupDataGrid id="gdWardUseBloodList"
													sumRowLabelText="小计"
													sumLableField="groupName"
													sumFields="[]"
													groupField="visitDeptName"
													hasRowNo="false"
													width="938"
													height="100%"
													styleName="dataGrid"
													textAlign="left"
													isShowTotalRow="false"
													sortableColumns="true"
													horizontalScrollPolicy="auto"
													format="{[,,'0.00']}">
								<controls:columns>
									<mx:DataGridColumn headerText="病区"
													   dataField="visitDeptName"
													   width="{(groupByWard.selected||groupByWardDoc.selected)?180:0}"
													   visible="{(groupByWard.selected||groupByWardDoc.selected)}"
													   textAlign="left"/>
									<mx:DataGridColumn headerText="开单医生"
													   dataField="visitDoctorName"
													   width="{(groupByDoctor.selected||groupByWardDoc.selected)?180:0}"
													   visible="{(groupByDoctor.selected||groupByWardDoc.selected)}"
													   textAlign="left"/>
									<mx:DataGridColumn headerText="血液成份"
													   textAlign="left"
													   width="200"
													   labelFunction="labFun"
													   dataField="typeName"/>
									<mx:DataGridColumn headerText="输血量"
													   dataField="assiAmount"
													   textAlign="right"
													   width="120"/>
									<mx:DataGridColumn headerText="单位"
													   dataField="assiUnits"
													   textAlign="left"
													   width="80"/>
								</controls:columns>
							</controls:GroupDataGrid>
						</s:NavigatorContent>
						<s:NavigatorContent label="按列汇总成分">
							
							<controls:SuperDataGrid id="gdDeliver"
													width="100%"
													height="100%"
													horizontalScrollPolicy="on"
													styleName="dataGrid">
								<controls:columns>
									<mx:DataGridColumn id="groupByDept" width="150"/>
									<mx:DataGridColumn id="groupField" width="150"/>
									<mx:DataGridColumn id="total" dataField="total" headerText="总计" textAlign="left"/>
								</controls:columns>
							</controls:SuperDataGrid>
						</s:NavigatorContent>
					</mx:TabNavigator>
					
					
					<!-- 操作按钮部分 -->
					<s:HGroup height="31"
							  paddingBottom="10"
							  horizontalAlign="right"
							  gap="5"
							  width="100%">
						<mx:LinkButton id="btPrint"
									   label=" 打 印"
									   fontSize="12"
									   width="86"
									   height="26"
									   enabled="{isData}"
									   skin="mx.skins.halo.ButtonSkin"
									   click="btPreview_clickHandler('05','1')"
									   disabledIcon="@Embed(source='/assets/images/button/print20_disabled.png')"
									   icon="@Embed(source='/assets/images/button/print20.png')"/>
						<mx:LinkButton id="btPreview"
									   label=" 预 览"
									   fontSize="12"
									   width="86"
									   height="26"
									   enabled="{isData}"
									   skin="mx.skins.halo.ButtonSkin"
									   disabledIcon="@Embed(source='/assets/images/button/query20_disabled.png')"
									   icon="@Embed(source='/assets/images/button/query20.png')"
									   click="btPreview_clickHandler('05','2')"/>
						<mx:LinkButton id="btExport"
									   label=" 输 出"
									   fontSize="12"
									   width="86"
									   height="26"
									   enabled="{isData}"
									   skin="mx.skins.halo.ButtonSkin"
									   click="btExport_clickHandler('08','0')"
									   disabledIcon="@Embed(source='/assets/images/button/exp20_disabled.png')"
									   icon="@Embed(source='/assets/images/button/exp20.png')"/>
						<mx:LinkButton id="btReturn"
									   label=" 返 回"
									   fontSize="12"
									   width="86"
									   height="26"
									   skin="mx.skins.halo.ButtonSkin"
									   icon="@Embed(source='/assets/images/button/return20.png')"
									   click="btReturn_clickHandler(event)"/>
						<mx:Spacer width="5"/>
					</s:HGroup>
				</s:VGroup>

			</s:BorderContainer>

		</s:VGroup>
	</s:Scroller>
	<!--</s:BorderContainer>-->

</mx:Module>
